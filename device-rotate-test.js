/**
 * device-rotate-test.js - Improved Version
 * 
 * ‡¶â‡¶®‡ßç‡¶®‡¶§‡¶ø ‡¶∏‡¶Æ‡ßÇ‡¶π:
 * - ‡¶á‡¶∞‡¶∞ ‡¶π‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡¶≤‡¶ø‡¶Ç ‡¶â‡¶®‡ßç‡¶®‡¶§
 * - ‡¶¨‡ßç‡¶∞‡¶æ‡¶â‡¶ú‡¶æ‡¶∞ ‡¶≤‡¶û‡ßç‡¶ö ‡¶Ö‡¶™‡ßç‡¶ü‡¶ø‡¶Æ‡¶æ‡¶á‡¶ú‡¶°
 * - ‡¶°‡¶ø‡¶≠‡¶æ‡¶á‡¶∏ ‡¶™‡ßç‡¶∞‡ßã‡¶´‡¶æ‡¶á‡¶≤ ‡¶Æ‡ßç‡¶Ø‡¶æ‡¶®‡ßá‡¶ú‡¶Æ‡ßá‡¶®‡ßç‡¶ü ‡¶∏‡¶π‡¶ú
 * - ‡¶∞‡¶ø‡¶∏‡ßã‡¶∞‡ßç‡¶∏ ‡¶≤‡¶ø‡¶ï ‡¶™‡ßç‡¶∞‡¶§‡¶ø‡¶∞‡ßã‡¶ß
 * - ‡¶¨‡¶ø‡¶∏‡ßç‡¶§‡¶æ‡¶∞‡¶ø‡¶§ ‡¶≤‡¶ó‡¶ø‡¶Ç
 * - ‡¶ó‡ßç‡¶∞‡ßá‡¶∏‡¶´‡ßÅ‡¶≤ ‡¶∂‡¶æ‡¶ü‡¶°‡¶æ‡¶â‡¶®
 *
 * Usage:
 *   1) npm install playwright
 *   2) npx playwright install
 *   3) node device-rotate-test.js https://your-test-url.example
 */

const { chromium, devices } = require('playwright');

const INTERVAL = 60_000; // ‡¶™‡ßç‡¶∞‡¶§‡¶ø ‡¶∞‡¶æ‡¶â‡¶®‡ßç‡¶°‡ßá‡¶∞ ‡¶¨‡¶ø‡¶∞‡¶§‡¶ø - 60000ms = 60s
const SDK_WAIT = 20_000; // SDK init ‡¶π‡¶ì‡¶Ø‡¶º‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶Ö‡¶™‡ßá‡¶ï‡ßç‡¶∑‡¶æ‡¶∞ ‡¶∏‡¶Æ‡¶Ø‡¶º
const PAGE_LOAD_TIMEOUT = 60_000; // ‡¶™‡ßá‡¶ú ‡¶≤‡ßã‡¶° ‡¶ü‡¶æ‡¶á‡¶Æ‡¶Ü‡¶â‡¶ü
const SCREENSHOT_PREFIX = 'screenshot';

// ‡¶°‡¶ø‡¶≠‡¶æ‡¶á‡¶∏ ‡¶™‡ßç‡¶∞‡ßã‡¶´‡¶æ‡¶á‡¶≤ ‡¶∏‡¶Ç‡¶ú‡ßç‡¶û‡¶æ
const deviceProfiles = [
  { ...devices['iPhone 15 Pro'], name: 'iPhone 15 Pro' },
  { ...devices['Pixel 6'], name: 'Pixel 6' },
  { ...devices['iPad (gen 7)'], name: 'iPad (gen 7)' },
  { 
    name: 'Desktop Chrome',
    viewport: { width: 1366, height: 768 },
    userAgent: 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',
    deviceScaleFactor: 1,
    isMobile: false,
    hasTouch: false
  },
  { ...devices['Galaxy S23'], name: 'Galaxy S23' }
];

// CLI ‡¶Ü‡¶∞‡ßç‡¶ó‡ßÅ‡¶Æ‡ßá‡¶®‡ßç‡¶ü ‡¶ö‡ßá‡¶ï
const url = process.argv[2];
if (!url) {
  console.error('Usage: node device-rotate-test.js <TEST_URL>');
  console.error('Example: node device-rotate-test.js https://example.com');
  process.exit(1);
}

// ‡¶ó‡ßç‡¶∞‡ßá‡¶∏‡¶´‡ßÅ‡¶≤ ‡¶∂‡¶æ‡¶ü‡¶°‡¶æ‡¶â‡¶® ‡¶π‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡¶≤‡¶ø‡¶Ç
let isShuttingDown = false;
process.on('SIGINT', () => {
  console.log('\nReceived SIGINT. Shutting down gracefully...');
  isShuttingDown = true;
  process.exit(0);
});

process.on('SIGTERM', () => {
  console.log('\nReceived SIGTERM. Shutting down gracefully...');
  isShuttingDown = true;
  process.exit(0);
});

/**
 * ‡¶è‡¶ï‡¶ü‡¶ø ‡¶°‡¶ø‡¶≠‡¶æ‡¶á‡¶∏ ‡¶™‡ßç‡¶∞‡ßã‡¶´‡¶æ‡¶á‡¶≤‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶ü‡ßá‡¶∏‡ßç‡¶ü ‡¶∞‡¶æ‡¶® ‡¶ï‡¶∞‡ßá
 */
async function testWithDevice(profile, iteration) {
  const profileName = profile.name || `profile-${iteration}`;
  let browser = null;
  let context = null;
  let page = null;

  try {
    console.log(`\nüöÄ Starting test for device: ${profileName}`);
    
    // ‡¶¨‡ßç‡¶∞‡¶æ‡¶â‡¶ú‡¶æ‡¶∞ ‡¶≤‡¶û‡ßç‡¶ö ‡¶ï‡¶∞‡ßÅ‡¶®
    browser = await chromium.launch({ 
      headless: false, 
      args: [
        '--disable-dev-shm-usage',
        '--no-sandbox',
        '--disable-setuid-sandbox',
        '--disable-web-security',
        '--disable-features=VizDisplayCompositor'
      ]
    });

    // ‡¶ï‡¶®‡¶ü‡ßá‡¶ï‡ßç‡¶∏‡¶ü ‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡ßÅ‡¶®
    context = await browser.newContext({
      viewport: profile.viewport,
      userAgent: profile.userAgent,
      deviceScaleFactor: profile.deviceScaleFactor,
      isMobile: profile.isMobile,
      hasTouch: profile.hasTouch,
      locale: profile.locale,
      // ‡¶™‡¶æ‡¶∞‡¶´‡¶∞‡¶Æ‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶∏ ‡¶á‡¶Æ‡ßç‡¶™‡ßç‡¶∞‡ßÅ‡¶≠‡¶Æ‡ßá‡¶®‡ßç‡¶ü
      ignoreHTTPSErrors: true,
      javaScriptEnabled: true
    });

    // ‡¶™‡ßá‡¶ú ‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡ßÅ‡¶®
    page = await context.newPage();
    
    // ‡¶ï‡¶®‡¶∏‡ßã‡¶≤ ‡¶≤‡¶ó ‡¶ï‡ßç‡¶Ø‡¶æ‡¶™‡¶ö‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßÅ‡¶®
    page.on('console', msg => {
      const logText = msg.text();
      const type = msg.type();
      console.log(`[${profileName}] [${type.toUpperCase()}] ${logText}`);
    });

    // ‡¶™‡ßá‡¶ú ‡¶è‡¶∞‡¶∞ ‡¶π‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡¶≤‡¶ø‡¶Ç
    page.on('pageerror', error => {
      console.error(`[${profileName}] Page Error:`, error.message);
    });

    // ‡¶®‡ßá‡¶ü‡¶ì‡¶Ø‡¶º‡¶æ‡¶∞‡ßç‡¶ï ‡¶∞‡¶ø‡¶ï‡ßã‡¶Ø‡¶º‡ßá‡¶∏‡ßç‡¶ü ‡¶≤‡¶ó ‡¶ï‡¶∞‡ßÅ‡¶®
    page.on('requestfailed', request => {
      console.error(`[${profileName}] Request Failed: ${request.url()} - ${request.failure().errorText}`);
    });

    console.log(`üì± Device: ${profileName}`);
    console.log(`üìè Viewport: ${profile.viewport?.width}x${profile.viewport?.height}`);
    console.log(`üåê User Agent: ${profile.userAgent?.substring(0, 80)}...`);
    console.log(`üîó Loading URL: ${url}`);

    // ‡¶™‡ßá‡¶ú ‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡ßÅ‡¶®
    await page.goto(url, { 
      waitUntil: 'domcontentloaded',
      timeout: PAGE_LOAD_TIMEOUT 
    });

    console.log('‚úÖ Page loaded successfully');
    console.log(`‚è≥ Waiting ${SDK_WAIT/1000}s for SDK initialization...`);

    // SDK ‡¶á‡¶®‡¶ø‡¶∂‡¶ø‡ßü‡¶æ‡¶≤‡¶æ‡¶á‡¶ú‡ßá‡¶∂‡¶®‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶Ö‡¶™‡ßá‡¶ï‡ßç‡¶∑‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®
    await page.waitForTimeout(SDK_WAIT);

    // ‡¶∏‡ßç‡¶ï‡ßç‡¶∞‡¶ø‡¶®‡¶∂‡¶ü ‡¶®‡¶ø‡¶®
    const screenshotPath = `${SCREENSHOT_PREFIX}-${iteration}-${profileName.replace(/\s+/g, '-')}.png`;
    await page.screenshot({ 
      path: screenshotPath, 
      fullPage: true,
      type: 'png',
      quality: 80
    });

    console.log(`üì∏ Screenshot saved: ${screenshotPath}`);

    // ‡¶™‡ßá‡¶ú ‡¶ü‡¶æ‡¶á‡¶ü‡ßá‡¶≤ ‡¶è‡¶¨‡¶Ç URL ‡¶≤‡¶ó ‡¶ï‡¶∞‡ßÅ‡¶®
    const pageTitle = await page.title();
    const currentUrl = page.url();
    console.log(`üìÑ Page Title: ${pageTitle}`);
    console.log(`üîó Current URL: ${currentUrl}`);

    return true;

  } catch (error) {
    console.error(`‚ùå Error testing device ${profileName}:`, error.message);
    
    // ‡¶á‡¶∞‡¶∞ ‡¶ï‡ßá‡¶∏‡ßá‡¶ì ‡¶∏‡ßç‡¶ï‡ßç‡¶∞‡¶ø‡¶®‡¶∂‡¶ü ‡¶®‡¶ø‡¶®
    if (page) {
      try {
        const errorScreenshotPath = `error-${SCREENSHOT_PREFIX}-${iteration}-${profileName.replace(/\s+/g, '-')}.png`;
        await page.screenshot({ path: errorScreenshotPath });
        console.log(`üì∏ Error screenshot saved: ${errorScreenshotPath}`);
      } catch (screenshotError) {
        console.error('Failed to take error screenshot:', screenshotError.message);
      }
    }
    
    return false;

  } finally {
    // ‡¶∞‡¶ø‡¶∏‡ßã‡¶∞‡ßç‡¶∏ ‡¶ï‡ßç‡¶≤‡¶ø‡¶®‡¶Ü‡¶™
    if (page && !page.isClosed()) {
      await page.close().catch(e => console.error('Error closing page:', e.message));
    }
    if (context) {
      await context.close().catch(e => console.error('Error closing context:', e.message));
    }
    if (browser) {
      await browser.close().catch(e => console.error('Error closing browser:', e.message));
    }
  }
}

/**
 * ‡¶Æ‡ßÇ‡¶≤ ‡¶ü‡ßá‡¶∏‡ßç‡¶ü ‡¶≤‡ßÅ‡¶™
 */
async function runTests() {
  console.log('üéØ Starting Device Rotation Test');
  console.log('üìä Target URL:', url);
  console.log('‚è∞ Interval:', INTERVAL/1000, 'seconds');
  console.log('üîÑ Device Profiles:', deviceProfiles.length);
  console.log('Press CTRL+C to stop the test\n');

  let iteration = 0;
  let successCount = 0;
  let errorCount = 0;

  while (!isShuttingDown) {
    const profile = deviceProfiles[iteration % deviceProfiles.length];
    
    console.log(`\n${'='.repeat(60)}`);
    console.log(`üîÑ Iteration ${iteration} - ${new Date().toISOString()}`);
    console.log(`${'='.repeat(60)}`);

    const success = await testWithDevice(profile, iteration);
    
    if (success) {
      successCount++;
    } else {
      errorCount++;
    }

    console.log(`üìä Summary - Success: ${successCount}, Errors: ${errorCount}, Total: ${iteration + 1}`);

    iteration++;

    // ‡¶∂‡ßá‡¶∑ ‡¶á‡¶ü‡¶æ‡¶∞‡ßá‡¶∂‡¶® ‡¶®‡¶æ ‡¶π‡¶≤‡ßá ‡¶Ö‡¶™‡ßá‡¶ï‡ßç‡¶∑‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®
    if (!isShuttingDown && iteration < 1000) { // safety limit
      console.log(`\nüí§ Sleeping for ${INTERVAL/1000} seconds before next device...`);
      
      // ‡¶∏‡ßç‡¶≤‡¶ø‡¶™ÊúüÈó¥ CTRL+C ‡¶ö‡ßá‡¶ï ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø
      await new Promise(resolve => {
        const interval = setInterval(() => {
          if (isShuttingDown) {
            clearInterval(interval);
            resolve();
          }
        }, 1000);
        
        setTimeout(() => {
          clearInterval(interval);
          resolve();
        }, INTERVAL);
      });
    }
  }

  console.log('\n‚úÖ Test completed gracefully');
}

// ‡¶Ü‡¶®‡¶π‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡¶≤‡ßç‡¶° ‡¶™‡ßç‡¶∞‡¶Æ‡¶ø‡¶∏ ‡¶∞‡¶ø‡¶ú‡ßá‡¶ï‡¶∂‡¶® ‡¶π‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡¶≤‡¶ø‡¶Ç
process.on('unhandledRejection', (reason, promise) => {
  console.error('Unhandled Rejection at:', promise, 'reason:', reason);
  process.exit(1);
});

process.on('uncaughtException', (error) => {
  console.error('Uncaught Exception:', error);
  process.exit(1);
});

// ‡¶™‡ßç‡¶∞‡ßã‡¶ó‡ßç‡¶∞‡¶æ‡¶Æ Ïã§Ìñâ
(async () => {
  try {
    await runTests();
  } catch (error) {
    console.error('Fatal error in main execution:', error);
    process.exit(1);
  }
})();
