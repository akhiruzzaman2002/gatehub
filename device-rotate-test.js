/**
 * device-rotate-test.js - Improved Version
 * 
 * ‡¶â‡¶®‡ßç‡¶®‡¶§‡¶ø ‡¶∏‡¶Æ‡ßÇ‡¶π:
 * - ‡¶á‡¶∞‡¶∞ ‡¶π‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡¶≤‡¶ø‡¶Ç ‡¶â‡¶®‡ßç‡¶®‡¶§
 * - ‡¶¨‡ßç‡¶∞‡¶æ‡¶â‡¶ú‡¶æ‡¶∞ ‡¶≤‡¶û‡ßç‡¶ö ‡¶Ö‡¶™‡ßç‡¶ü‡¶ø‡¶Æ‡¶æ‡¶á‡¶ú‡¶°
 * - ‡¶°‡¶ø‡¶≠‡¶æ‡¶á‡¶∏ ‡¶™‡ßç‡¶∞‡ßã‡¶´‡¶æ‡¶á‡¶≤ ‡¶Æ‡ßç‡¶Ø‡¶æ‡¶®‡ßá‡¶ú‡¶Æ‡ßá‡¶®‡ßç‡¶ü ‡¶∏‡¶π‡¶ú
 * - ‡¶∞‡¶ø‡¶∏‡ßã‡¶∞‡ßç‡¶∏ ‡¶≤‡¶ø‡¶ï ‡¶™‡ßç‡¶∞‡¶§‡¶ø‡¶∞‡ßã‡¶ß
 * - ‡¶¨‡¶ø‡¶∏‡ßç‡¶§‡¶æ‡¶∞‡¶ø‡¶§ ‡¶≤‡¶ó‡¶ø‡¶Ç
 * - ‡¶ó‡ßç‡¶∞‡ßá‡¶∏‡¶´‡ßÅ‡¶≤ ‡¶∂‡¶æ‡¶ü‡¶°‡¶æ‡¶â‡¶®
 *
 * Usage:
 *   1) npm install playwright
 *   2) npx playwright install
 *   3) node device-rotate-test.js https://your-test-url.example
 */

const { chromium, devices } = require('playwright');
const fs = require('fs').promises;

const INTERVAL = 60_000; // ‡¶™‡ßç‡¶∞‡¶§‡¶ø ‡¶∞‡¶æ‡¶â‡¶®‡ßç‡¶°‡ßá‡¶∞ ‡¶¨‡¶ø‡¶∞‡¶§‡¶ø - 60000ms = 60s
const SDK_WAIT = 20_000; // SDK init ‡¶π‡¶ì‡¶Ø‡¶º‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶Ö‡¶™‡ßá‡¶ï‡ßç‡¶∑‡¶æ‡¶∞ ‡¶∏‡¶Æ‡¶Ø‡¶º
const PAGE_LOAD_TIMEOUT = 60_000; // ‡¶™‡ßá‡¶ú ‡¶≤‡ßã‡¶° ‡¶ü‡¶æ‡¶á‡¶Æ‡¶Ü‡¶â‡¶ü
const SCREENSHOT_PREFIX = 'screenshot';
const MAX_ITERATIONS = 1000; // ‡¶∏‡ßá‡¶´‡¶ü‡¶ø ‡¶≤‡¶ø‡¶Æ‡¶ø‡¶ü

// ‡¶°‡¶ø‡¶≠‡¶æ‡¶á‡¶∏ ‡¶™‡ßç‡¶∞‡ßã‡¶´‡¶æ‡¶á‡¶≤ ‡¶∏‡¶Ç‡¶ú‡ßç‡¶û‡¶æ - ‡¶´‡¶ø‡¶ï‡ßç‡¶∏‡¶°
const deviceProfiles = [
  { 
    ...devices['iPhone 15 Pro'], 
    name: 'iPhone 15 Pro',
    viewport: devices['iPhone 15 Pro'].viewport 
  },
  { 
    ...devices['Pixel 6'], 
    name: 'Pixel 6',
    viewport: devices['Pixel 6'].viewport 
  },
  { 
    ...devices['iPad (gen 7)'], 
    name: 'iPad (gen 7)',
    viewport: devices['iPad (gen 7)'].viewport 
  },
  { 
    name: 'Desktop Chrome',
    viewport: { width: 1366, height: 768 },
    userAgent: 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',
    deviceScaleFactor: 1,
    isMobile: false,
    hasTouch: false
  },
  { 
    ...devices['Galaxy S23'], 
    name: 'Galaxy S23',
    viewport: devices['Galaxy S23'].viewport 
  }
];

// CLI ‡¶Ü‡¶∞‡ßç‡¶ó‡ßÅ‡¶Æ‡ßá‡¶®‡ßç‡¶ü ‡¶ö‡ßá‡¶ï
const url = process.argv[2];
if (!url) {
  console.error('Usage: node device-rotate-test.js <TEST_URL>');
  console.error('Example: node device-rotate-test.js https://example.com');
  process.exit(1);
}

// ‡¶ó‡ßç‡¶∞‡ßá‡¶∏‡¶´‡ßÅ‡¶≤ ‡¶∂‡¶æ‡¶ü‡¶°‡¶æ‡¶â‡¶® ‡¶π‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡¶≤‡¶ø‡¶Ç
let isShuttingDown = false;
let currentTest = null;

process.on('SIGINT', async () => {
  console.log('\nReceived SIGINT. Shutting down gracefully...');
  isShuttingDown = true;
  if (currentTest) {
    await currentTest.cleanup().catch(console.error);
  }
  process.exit(0);
});

process.on('SIGTERM', async () => {
  console.log('\nReceived SIGTERM. Shutting down gracefully...');
  isShuttingDown = true;
  if (currentTest) {
    await currentTest.cleanup().catch(console.error);
  }
  process.exit(0);
});

class DeviceTester {
  constructor(profile, iteration) {
    this.profile = profile;
    this.iteration = iteration;
    this.profileName = profile.name || `profile-${iteration}`;
    this.browser = null;
    this.context = null;
    this.page = null;
    this.cleanupCalled = false;
  }

  async cleanup() {
    if (this.cleanupCalled) return;
    this.cleanupCalled = true;

    const cleanupTasks = [];
    
    if (this.page && !this.page.isClosed()) {
      cleanupTasks.push(this.page.close().catch(e => 
        console.error(`Error closing page for ${this.profileName}:`, e.message))
      );
    }
    
    if (this.context) {
      cleanupTasks.push(this.context.close().catch(e => 
        console.error(`Error closing context for ${this.profileName}:`, e.message))
      );
    }
    
    if (this.browser) {
      cleanupTasks.push(this.browser.close().catch(e => 
        console.error(`Error closing browser for ${this.profileName}:`, e.message))
      );
    }

    await Promise.allSettled(cleanupTasks);
    this.page = null;
    this.context = null;
    this.browser = null;
  }

  async test() {
    try {
      console.log(`\nüöÄ Starting test for device: ${this.profileName}`);
      
      // ‡¶¨‡ßç‡¶∞‡¶æ‡¶â‡¶ú‡¶æ‡¶∞ ‡¶≤‡¶û‡ßç‡¶ö ‡¶ï‡¶∞‡ßÅ‡¶®
      this.browser = await chromium.launch({ 
        headless: true, // ‡¶π‡ßá‡¶°‡¶≤‡ßá‡¶∏ ‡¶Æ‡ßã‡¶°‡ßá ‡¶ö‡¶æ‡¶≤‡¶æ‡¶® for stability
        args: [
          '--disable-dev-shm-usage',
          '--no-sandbox',
          '--disable-setuid-sandbox',
          '--disable-web-security',
          '--disable-features=VizDisplayCompositor',
          '--disable-gpu',
          '--disable-software-rasterizer'
        ],
        timeout: 30000
      });

      // ‡¶ï‡¶®‡¶ü‡ßá‡¶ï‡ßç‡¶∏‡¶ü ‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡ßÅ‡¶®
      this.context = await this.browser.newContext({
        viewport: this.profile.viewport,
        userAgent: this.profile.userAgent,
        deviceScaleFactor: this.profile.deviceScaleFactor || 1,
        isMobile: this.profile.isMobile || false,
        hasTouch: this.profile.hasTouch || false,
        locale: this.profile.locale || 'en-US',
        ignoreHTTPSErrors: true,
        javaScriptEnabled: true
      });

      // ‡¶™‡ßá‡¶ú ‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡ßÅ‡¶®
      this.page = await this.context.newPage();
      
      // ‡¶á‡¶≠‡ßá‡¶®‡ßç‡¶ü ‡¶π‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡¶≤‡¶æ‡¶∞ ‡¶∏‡ßá‡¶ü‡¶Ü‡¶™
      this.setupEventHandlers();

      console.log(`üì± Device: ${this.profileName}`);
      console.log(`üìè Viewport: ${this.profile.viewport?.width}x${this.profile.viewport?.height}`);
      console.log(`üåê User Agent: ${this.profile.userAgent?.substring(0, 80)}...`);
      console.log(`üîó Loading URL: ${url}`);

      // ‡¶™‡ßá‡¶ú ‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡ßÅ‡¶® with better error handling
      await this.loadPage();

      console.log('‚úÖ Page loaded successfully');
      console.log(`‚è≥ Waiting ${SDK_WAIT/1000}s for SDK initialization...`);

      // SDK ‡¶á‡¶®‡¶ø‡¶∂‡¶ø‡ßü‡¶æ‡¶≤‡¶æ‡¶á‡¶ú‡ßá‡¶∂‡¶®‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶Ö‡¶™‡ßá‡¶ï‡ßç‡¶∑‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®
      await this.page.waitForTimeout(SDK_WAIT);

      // ‡¶∏‡ßç‡¶ï‡ßç‡¶∞‡¶ø‡¶®‡¶∂‡¶ü ‡¶®‡¶ø‡¶®
      await this.takeScreenshot();

      // ‡¶™‡ßá‡¶ú ‡¶á‡¶®‡¶´‡ßã ‡¶∏‡¶Ç‡¶ó‡ßç‡¶∞‡¶π ‡¶ï‡¶∞‡ßÅ‡¶®
      await this.collectPageInfo();

      return true;

    } catch (error) {
      console.error(`‚ùå Error testing device ${this.profileName}:`, error.message);
      await this.takeErrorScreenshot();
      return false;

    } finally {
      await this.cleanup();
    }
  }

  setupEventHandlers() {
    // ‡¶ï‡¶®‡¶∏‡ßã‡¶≤ ‡¶≤‡¶ó ‡¶ï‡ßç‡¶Ø‡¶æ‡¶™‡¶ö‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßÅ‡¶®
    this.page.on('console', msg => {
      const logText = msg.text();
      const type = msg.type();
      if (type === 'error' || type === 'warning') {
        console.log(`[${this.profileName}] [${type.toUpperCase()}] ${logText}`);
      }
    });

    // ‡¶™‡ßá‡¶ú ‡¶è‡¶∞‡¶∞ ‡¶π‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡¶≤‡¶ø‡¶Ç
    this.page.on('pageerror', error => {
      console.error(`[${this.profileName}] Page Error:`, error.message);
    });

    // ‡¶®‡ßá‡¶ü‡¶ì‡¶Ø‡¶º‡¶æ‡¶∞‡ßç‡¶ï ‡¶∞‡¶ø‡¶ï‡ßã‡¶Ø‡¶º‡ßá‡¶∏‡ßç‡¶ü ‡¶≤‡¶ó ‡¶ï‡¶∞‡ßÅ‡¶®
    this.page.on('requestfailed', request => {
      const failure = request.failure();
      if (failure) {
        console.error(`[${this.profileName}] Request Failed: ${request.url()} - ${failure.errorText}`);
      }
    });

    // ‡¶∞‡ßá‡¶∏‡¶™‡¶®‡ßç‡¶∏ ‡¶π‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡¶≤‡¶ø‡¶Ç
    this.page.on('response', response => {
      if (!response.ok()) {
        console.warn(`[${this.profileName}] HTTP ${response.status(): ${response.url()}`);
      }
    });
  }

  async loadPage() {
    try {
      await this.page.goto(url, { 
        waitUntil: 'networkidle',
        timeout: PAGE_LOAD_TIMEOUT 
      });
    } catch (error) {
      // networkidle ‡¶´‡ßá‡¶≤‡¶≤‡ßá domcontentloaded try ‡¶ï‡¶∞‡ßÅ‡¶®
      if (error.name === 'TimeoutError') {
        console.log('Trying domcontentloaded as fallback...');
        await this.page.goto(url, { 
          waitUntil: 'domcontentloaded',
          timeout: PAGE_LOAD_TIMEOUT 
        });
      } else {
        throw error;
      }
    }
  }

  async takeScreenshot() {
    const safeName = this.profileName.replace(/[^a-z0-9]/gi, '-');
    const screenshotPath = `${SCREENSHOT_PREFIX}-${this.iteration}-${safeName}.png`;
    
    await this.page.screenshot({ 
      path: screenshotPath, 
      fullPage: true,
      type: 'png',
      quality: 80,
      timeout: 10000
    });

    console.log(`üì∏ Screenshot saved: ${screenshotPath}`);
  }

  async takeErrorScreenshot() {
    if (!this.page) return;
    
    try {
      const safeName = this.profileName.replace(/[^a-z0-9]/gi, '-');
      const errorScreenshotPath = `error-${SCREENSHOT_PREFIX}-${this.iteration}-${safeName}.png`;
      await this.page.screenshot({ 
        path: errorScreenshotPath,
        timeout: 5000 
      });
      console.log(`üì∏ Error screenshot saved: ${errorScreenshotPath}`);
    } catch (screenshotError) {
      console.error('Failed to take error screenshot:', screenshotError.message);
    }
  }

  async collectPageInfo() {
    try {
      const pageTitle = await this.page.title();
      const currentUrl = this.page.url();
      console.log(`üìÑ Page Title: ${pageTitle}`);
      console.log(`üîó Current URL: ${currentUrl}`);
    } catch (error) {
      console.error('Error collecting page info:', error.message);
    }
  }
}

/**
 * ‡¶è‡¶ï‡¶ü‡¶ø ‡¶°‡¶ø‡¶≠‡¶æ‡¶á‡¶∏ ‡¶™‡ßç‡¶∞‡ßã‡¶´‡¶æ‡¶á‡¶≤‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶ü‡ßá‡¶∏‡ßç‡¶ü ‡¶∞‡¶æ‡¶® ‡¶ï‡¶∞‡ßá
 */
async function testWithDevice(profile, iteration) {
  const tester = new DeviceTester(profile, iteration);
  currentTest = tester;
  const result = await tester.test();
  currentTest = null;
  return result;
}

/**
 * ‡¶Æ‡ßÇ‡¶≤ ‡¶ü‡ßá‡¶∏‡ßç‡¶ü ‡¶≤‡ßÅ‡¶™
 */
async function runTests() {
  console.log('üéØ Starting Device Rotation Test');
  console.log('üìä Target URL:', url);
  console.log('‚è∞ Interval:', INTERVAL/1000, 'seconds');
  console.log('üîÑ Device Profiles:', deviceProfiles.length);
  console.log('üìÅ Screenshot Prefix:', SCREENSHOT_PREFIX);
  console.log('Press CTRL+C to stop the test\n');

  let iteration = 0;
  let successCount = 0;
  let errorCount = 0;

  // ‡¶∏‡ßç‡¶ï‡ßç‡¶∞‡¶ø‡¶®‡¶∂‡¶ü ‡¶°‡¶ø‡¶∞‡ßá‡¶ï‡ßç‡¶ü‡¶∞‡¶ø ‡¶ö‡ßá‡¶ï ‡¶ï‡¶∞‡ßÅ‡¶®
  try {
    await fs.access('./');
    console.log('‚úÖ Current directory is accessible for screenshots');
  } catch (error) {
    console.error('‚ùå Cannot write to current directory:', error.message);
    return;
  }

  while (!isShuttingDown && iteration < MAX_ITERATIONS) {
    const profileIndex = iteration % deviceProfiles.length;
    const profile = deviceProfiles[profileIndex];
    
    console.log(`\n${'='.repeat(60)}`);
    console.log(`üîÑ Iteration ${iteration + 1} - ${new Date().toLocaleString()}`);
    console.log(`üì± Device ${profileIndex + 1}/${deviceProfiles.length}: ${profile.name}`);
    console.log(`${'='.repeat(60)}`);

    const success = await testWithDevice(profile, iteration);
    
    if (success) {
      successCount++;
    } else {
      errorCount++;
    }

    const totalTests = iteration + 1;
    const successRate = ((successCount / totalTests) * 100).toFixed(1);
    
    console.log(`üìä Summary - Success: ${successCount}, Errors: ${errorCount}, Total: ${totalTests}, Success Rate: ${successRate}%`);

    iteration++;

    // ‡¶∂‡ßá‡¶∑ ‡¶á‡¶ü‡¶æ‡¶∞‡ßá‡¶∂‡¶® ‡¶®‡¶æ ‡¶π‡¶≤‡ßá ‡¶Ö‡¶™‡ßá‡¶ï‡ßç‡¶∑‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®
    if (!isShuttingDown && iteration < MAX_ITERATIONS) {
      console.log(`\nüí§ Sleeping for ${INTERVAL/1000} seconds before next device...`);
      
      await sleepWithInterrupt(INTERVAL);
    }
  }

  console.log('\n‚úÖ Test completed');
  console.log(`üéØ Final Stats - Success: ${successCount}, Errors: ${errorCount}, Total Iterations: ${iteration}`);
}

/**
 * ‡¶á‡¶®‡ßç‡¶ü‡¶æ‡¶∞‡¶æ‡¶™‡ßç‡¶ü ‡¶ï‡¶∞‡¶æ ‡¶Ø‡¶æ‡¶Ø‡¶º ‡¶è‡¶Æ‡¶® ‡¶∏‡ßç‡¶≤‡¶ø‡¶™ ‡¶´‡¶æ‡¶Ç‡¶∂‡¶®
 */
function sleepWithInterrupt(ms) {
  return new Promise(resolve => {
    const checkInterval = setInterval(() => {
      if (isShuttingDown) {
        clearInterval(checkInterval);
        resolve();
      }
    }, 1000);
    
    const timeout = setTimeout(() => {
      clearInterval(checkInterval);
      resolve();
    }, ms);

    // ‡¶∂‡¶æ‡¶ü‡¶°‡¶æ‡¶â‡¶® ‡¶π‡¶≤‡ßá ‡¶ï‡ßç‡¶≤‡¶ø‡¶Ø‡¶º‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßÅ‡¶®
    if (isShuttingDown) {
      clearTimeout(timeout);
      clearInterval(checkInterval);
      resolve();
    }
  });
}

// ‡¶Ü‡¶®‡¶π‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡¶≤‡ßç‡¶° ‡¶™‡ßç‡¶∞‡¶Æ‡¶ø‡¶∏ ‡¶∞‡¶ø‡¶ú‡ßá‡¶ï‡¶∂‡¶® ‡¶π‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡¶≤‡¶ø‡¶Ç
process.on('unhandledRejection', (reason, promise) => {
  console.error('Unhandled Rejection at:', promise, 'reason:', reason);
  if (currentTest) {
    currentTest.cleanup().catch(console.error);
  }
  process.exit(1);
});

process.on('uncaughtException', (error) => {
  console.error('Uncaught Exception:', error);
  if (currentTest) {
    currentTest.cleanup().catch(console.error);
  }
  process.exit(1);
});

// ‡¶™‡ßç‡¶∞‡ßã‡¶ó‡ßç‡¶∞‡¶æ‡¶Æ Ïã§Ìñâ
(async () => {
  try {
    await runTests();
  } catch (error) {
    console.error('Fatal error in main execution:', error);
    process.exit(1);
  }
})();
